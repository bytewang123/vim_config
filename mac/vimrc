" No Vi-compatible
set nocompatible

" Filetype disabled for vundle
filetype off

"let g:go_debug = ['shell-commands']


" Mapleader
let mapleader=','
let g:mapleader=','

if has("win32") || has ('win64')
    let g:vimPath = $HOME . '/vimfiles/'
else
    let g:vimPath = $HOME . '/.vim/'
endif

" Plugins managed by vundle
if (isdirectory(g:vimPath . 'bundle/Vundle.vim'))
    let &runtimepath.=',' . g:vimPath . 'bundle/Vundle.vim'
    call vundle#begin()
    Plugin 'gmarik/Vundle.vim'
    Plugin 'fatih/vim-go'
    call vundle#end()
endif

let g:go_def_mode = 'godef'

call plug#begin('~/.vim/plugged')
    " Use release branch (Recommend)
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

let g:go_def_mode = 'godef'


" Filetype detecting
filetype plugin indent on

" Sytax highlighting
syntax on

" File encoding
if has("win32") || has("win64")
    set encoding=chinese
    set fileencoding=chinese
elseif has("win32unix")         " Cygwin
    set encoding=chinese
    set fileencoding=utf-8
else
    set encoding=utf-8
    set fileencoding=utf-8
endif
set fileencodings=utf-8,ucs-bom,chinese,taiwan,latin1
let &termencoding=&encoding

" File formats
set fileformats=unix,dos,mac

" Indenting
set expandtab
set smarttab
set tabstop=4
set shiftwidth=4
set autoindent
set smartindent

" Editing
set backspace=indent,eol,start
set whichwrap+=<,>,h,l
set autoread

" Displaying
set number
set nowrap
set linespace=0
set textwidth=0
set nolinebreak
set hidden
set scrolloff=7
set scrolljump=3
set showmatch
set matchtime=2
set matchpairs=(:),[:],{:},<:>
set lazyredraw

" Disable bells
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set report=0

" Command line
set showcmd
set history=100
set wildmenu
set wildmode=list,longest,full
set wildignore=*~,*.o,*.so,*.so.*,*.a,*.d,*.pyc,*.pyo,*.class
set shortmess+=filmnrxoOtT

" Making View
"set viewoptions=folds,options,cursor,unix,slash
"au BufWinLeave * silent! mkview
"au BufWinEnter * silent! loadview

" Save editing position
if has("autocmd")
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ exec "normal g'\"" |
        \ endif
endif

" Status line
set ruler
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set laststatus=2

" Searching/Replacing
set magic
set ignorecase
set smartcase
set hlsearch
set incsearch
set gdefault
set wrapscan

" Folding
set foldenable
set foldmethod=syntax
set foldlevel=100

" Backing up
set backup
set writebackup
set backupdir=~/.tmp,/tmp
if !isdirectory($HOME.'/.tmp')
    if exists('*mkdir')
        call mkdir($HOME.'/.tmp', '', 0755)
    else
        call system('mkdir '.$HOME.'/.tmp')
    endif
endif

" Swapping
set noswapfile

" Disable mouse
set mouse=

" Highlighting the current line
if exists('+cursorline')
    set cursorline
endif

" Coloring
colorscheme desert
hi ColorColumn ctermbg=darkgray guibg=darkgray

" GUI settings
if has('gui_running')
    if has('win32') || has('win64')
        set guifont=Courier_New:h9:cANSI
    else
        set guifont=Luxi\ Mono\ 9
    endif
    set guioptions-=m
    set guioptions-=T
    set t_Co=256
endif

" Search paths
if has('unix')
    set path=.,/usr/local/include,/usr/include
    set path+=/usr/include/c++/**
    set path+=./include,../include
endif

" Mapping - quit/save
nmap <leader>q :qa!<cr>
nmap <leader>wq :wqa!<cr>
nmap <leader>ww :w!<cr>
nmap <leader>wa :wa!<cr>
nmap <leader>w! :w !sudo tee % >/dev/null<cr><cr>

" Mapping - buffer switching
nmap <c-n> :bn<cr>
nmap <c-p> :bp<cr>

" Mapping - pasting mode toggle
nmap <leader>p :setlocal paste!<cr>

" Mapping - avoiding typo
nnoremap ; :

" Mapping - folding
" nmap <leader>f0 :set foldlevel=0<cr>
" nmap <leader>f1 :set foldlevel=1<cr>
" nmap <leader>f2 :set foldlevel=2<cr>
" nmap <leader>f3 :set foldlevel=3<cr>
" nmap <leader>f4 :set foldlevel=4<cr>
" nmap <leader>f5 :set foldlevel=5<cr>
" nmap <leader>f6 :set foldlevel=6<cr>
" nmap <leader>f7 :set foldlevel=7<cr>
" nmap <leader>f8 :set foldlevel=8<cr>
" nmap <leader>f9 :set foldlevel=9<cr>

" Mapping - clear highlighted search
nmap <silent> <leader>/ :nohls<cr>

" Mapping - visual shifting (does not exit visual mode)
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv

" Remove trailing whitespace and ^M chars
"autocmd FileType c,cpp,java,php,js,python,twig,xml,yml
"    \ autocmd BufWritePre <buffer>
"    \ :call setline(1,map(getline(1,"$"),'substitute(v:val,"\\s\\+$","","")'))


" Cscope
if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-,g-
endif

" Other filetypes
augroup filetype
    au! BufRead,BufNewFile *.thrift set filetype=thrift
    au! BufRead,BufNewFile *.proto set filetype=proto
    au! BufRead,BufNewFile *.ipp set filetype=cpp
augroup end

""""""""""""""""""""""""""""""
   " Tag list ctags
""""""""""""""""""""""""""""""
let Tlist_Ctags_Cmd='/usr/bin/ctags'
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=1
let Tlist_Use_Right_Window=1

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
"set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
